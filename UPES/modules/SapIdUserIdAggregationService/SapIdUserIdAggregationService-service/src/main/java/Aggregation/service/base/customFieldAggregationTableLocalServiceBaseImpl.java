/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package Aggregation.service.base;

import Aggregation.model.customFieldAggregationTable;

import Aggregation.service.customFieldAggregationTableLocalService;

import Aggregation.service.persistence.customFieldAggregationTablePersistence;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the custom field aggregation table local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link Aggregation.service.impl.customFieldAggregationTableLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Aggregation.service.impl.customFieldAggregationTableLocalServiceImpl
 * @see Aggregation.service.customFieldAggregationTableLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class customFieldAggregationTableLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements customFieldAggregationTableLocalService, IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link Aggregation.service.customFieldAggregationTableLocalServiceUtil} to access the custom field aggregation table local service.
	 */

	/**
	 * Adds the custom field aggregation table to the database. Also notifies the appropriate model listeners.
	 *
	 * @param customFieldAggregationTable the custom field aggregation table
	 * @return the custom field aggregation table that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public customFieldAggregationTable addcustomFieldAggregationTable(
		customFieldAggregationTable customFieldAggregationTable) {
		customFieldAggregationTable.setNew(true);

		return customFieldAggregationTablePersistence.update(customFieldAggregationTable);
	}

	/**
	 * Creates a new custom field aggregation table with the primary key. Does not add the custom field aggregation table to the database.
	 *
	 * @param SapId the primary key for the new custom field aggregation table
	 * @return the new custom field aggregation table
	 */
	@Override
	public customFieldAggregationTable createcustomFieldAggregationTable(
		int SapId) {
		return customFieldAggregationTablePersistence.create(SapId);
	}

	/**
	 * Deletes the custom field aggregation table with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param SapId the primary key of the custom field aggregation table
	 * @return the custom field aggregation table that was removed
	 * @throws PortalException if a custom field aggregation table with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public customFieldAggregationTable deletecustomFieldAggregationTable(
		int SapId) throws PortalException {
		return customFieldAggregationTablePersistence.remove(SapId);
	}

	/**
	 * Deletes the custom field aggregation table from the database. Also notifies the appropriate model listeners.
	 *
	 * @param customFieldAggregationTable the custom field aggregation table
	 * @return the custom field aggregation table that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public customFieldAggregationTable deletecustomFieldAggregationTable(
		customFieldAggregationTable customFieldAggregationTable) {
		return customFieldAggregationTablePersistence.remove(customFieldAggregationTable);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(customFieldAggregationTable.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return customFieldAggregationTablePersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link Aggregation.model.impl.customFieldAggregationTableModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return customFieldAggregationTablePersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link Aggregation.model.impl.customFieldAggregationTableModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return customFieldAggregationTablePersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return customFieldAggregationTablePersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return customFieldAggregationTablePersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public customFieldAggregationTable fetchcustomFieldAggregationTable(
		int SapId) {
		return customFieldAggregationTablePersistence.fetchByPrimaryKey(SapId);
	}

	/**
	 * Returns the custom field aggregation table with the primary key.
	 *
	 * @param SapId the primary key of the custom field aggregation table
	 * @return the custom field aggregation table
	 * @throws PortalException if a custom field aggregation table with the primary key could not be found
	 */
	@Override
	public customFieldAggregationTable getcustomFieldAggregationTable(int SapId)
		throws PortalException {
		return customFieldAggregationTablePersistence.findByPrimaryKey(SapId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(customFieldAggregationTableLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(customFieldAggregationTable.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("SapId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(customFieldAggregationTableLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(customFieldAggregationTable.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("SapId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(customFieldAggregationTableLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(customFieldAggregationTable.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("SapId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return customFieldAggregationTableLocalService.deletecustomFieldAggregationTable((customFieldAggregationTable)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return customFieldAggregationTablePersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the custom field aggregation tables.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link Aggregation.model.impl.customFieldAggregationTableModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of custom field aggregation tables
	 * @param end the upper bound of the range of custom field aggregation tables (not inclusive)
	 * @return the range of custom field aggregation tables
	 */
	@Override
	public List<customFieldAggregationTable> getcustomFieldAggregationTables(
		int start, int end) {
		return customFieldAggregationTablePersistence.findAll(start, end);
	}

	/**
	 * Returns the number of custom field aggregation tables.
	 *
	 * @return the number of custom field aggregation tables
	 */
	@Override
	public int getcustomFieldAggregationTablesCount() {
		return customFieldAggregationTablePersistence.countAll();
	}

	/**
	 * Updates the custom field aggregation table in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param customFieldAggregationTable the custom field aggregation table
	 * @return the custom field aggregation table that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public customFieldAggregationTable updatecustomFieldAggregationTable(
		customFieldAggregationTable customFieldAggregationTable) {
		return customFieldAggregationTablePersistence.update(customFieldAggregationTable);
	}

	/**
	 * Returns the custom field aggregation table local service.
	 *
	 * @return the custom field aggregation table local service
	 */
	public customFieldAggregationTableLocalService getcustomFieldAggregationTableLocalService() {
		return customFieldAggregationTableLocalService;
	}

	/**
	 * Sets the custom field aggregation table local service.
	 *
	 * @param customFieldAggregationTableLocalService the custom field aggregation table local service
	 */
	public void setcustomFieldAggregationTableLocalService(
		customFieldAggregationTableLocalService customFieldAggregationTableLocalService) {
		this.customFieldAggregationTableLocalService = customFieldAggregationTableLocalService;
	}

	/**
	 * Returns the custom field aggregation table persistence.
	 *
	 * @return the custom field aggregation table persistence
	 */
	public customFieldAggregationTablePersistence getcustomFieldAggregationTablePersistence() {
		return customFieldAggregationTablePersistence;
	}

	/**
	 * Sets the custom field aggregation table persistence.
	 *
	 * @param customFieldAggregationTablePersistence the custom field aggregation table persistence
	 */
	public void setcustomFieldAggregationTablePersistence(
		customFieldAggregationTablePersistence customFieldAggregationTablePersistence) {
		this.customFieldAggregationTablePersistence = customFieldAggregationTablePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("Aggregation.model.customFieldAggregationTable",
			customFieldAggregationTableLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"Aggregation.model.customFieldAggregationTable");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return customFieldAggregationTableLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return customFieldAggregationTable.class;
	}

	protected String getModelClassName() {
		return customFieldAggregationTable.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = customFieldAggregationTablePersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = customFieldAggregationTableLocalService.class)
	protected customFieldAggregationTableLocalService customFieldAggregationTableLocalService;
	@BeanReference(type = customFieldAggregationTablePersistence.class)
	protected customFieldAggregationTablePersistence customFieldAggregationTablePersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}