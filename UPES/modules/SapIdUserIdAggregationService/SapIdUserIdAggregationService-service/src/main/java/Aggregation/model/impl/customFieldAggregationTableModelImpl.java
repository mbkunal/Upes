/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package Aggregation.model.impl;

import Aggregation.model.customFieldAggregationTable;
import Aggregation.model.customFieldAggregationTableModel;
import Aggregation.model.customFieldAggregationTableSoap;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the customFieldAggregationTable service. Represents a row in the &quot;kmb_customFieldAggregationTable&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link customFieldAggregationTableModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link customFieldAggregationTableImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see customFieldAggregationTableImpl
 * @see customFieldAggregationTable
 * @see customFieldAggregationTableModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class customFieldAggregationTableModelImpl extends BaseModelImpl<customFieldAggregationTable>
	implements customFieldAggregationTableModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a custom field aggregation table model instance should use the {@link customFieldAggregationTable} interface instead.
	 */
	public static final String TABLE_NAME = "kmb_customFieldAggregationTable";
	public static final Object[][] TABLE_COLUMNS = {
			{ "UserId", Types.INTEGER },
			{ "SapId", Types.INTEGER },
			{ "Cgpa", Types.DOUBLE }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("UserId", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("SapId", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("Cgpa", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE = "create table kmb_customFieldAggregationTable (UserId INTEGER,SapId INTEGER not null primary key,Cgpa DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table kmb_customFieldAggregationTable";
	public static final String ORDER_BY_JPQL = " ORDER BY customFieldAggregationTable.SapId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY kmb_customFieldAggregationTable.SapId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(Aggregation.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.Aggregation.model.customFieldAggregationTable"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(Aggregation.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.Aggregation.model.customFieldAggregationTable"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(Aggregation.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.Aggregation.model.customFieldAggregationTable"),
			true);
	public static final long SAPID_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static customFieldAggregationTable toModel(
		customFieldAggregationTableSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		customFieldAggregationTable model = new customFieldAggregationTableImpl();

		model.setUserId(soapModel.getUserId());
		model.setSapId(soapModel.getSapId());
		model.setCgpa(soapModel.getCgpa());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<customFieldAggregationTable> toModels(
		customFieldAggregationTableSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<customFieldAggregationTable> models = new ArrayList<customFieldAggregationTable>(soapModels.length);

		for (customFieldAggregationTableSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(Aggregation.service.util.ServiceProps.get(
				"lock.expiration.time.Aggregation.model.customFieldAggregationTable"));

	public customFieldAggregationTableModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _SapId;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setSapId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _SapId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return customFieldAggregationTable.class;
	}

	@Override
	public String getModelClassName() {
		return customFieldAggregationTable.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("UserId", getUserId());
		attributes.put("SapId", getSapId());
		attributes.put("Cgpa", getCgpa());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer UserId = (Integer)attributes.get("UserId");

		if (UserId != null) {
			setUserId(UserId);
		}

		Integer SapId = (Integer)attributes.get("SapId");

		if (SapId != null) {
			setSapId(SapId);
		}

		Double Cgpa = (Double)attributes.get("Cgpa");

		if (Cgpa != null) {
			setCgpa(Cgpa);
		}
	}

	@JSON
	@Override
	public int getUserId() {
		return _UserId;
	}

	@Override
	public void setUserId(int UserId) {
		_UserId = UserId;
	}

	@JSON
	@Override
	public int getSapId() {
		return _SapId;
	}

	@Override
	public void setSapId(int SapId) {
		_columnBitmask |= SAPID_COLUMN_BITMASK;

		if (!_setOriginalSapId) {
			_setOriginalSapId = true;

			_originalSapId = _SapId;
		}

		_SapId = SapId;
	}

	public int getOriginalSapId() {
		return _originalSapId;
	}

	@JSON
	@Override
	public double getCgpa() {
		return _Cgpa;
	}

	@Override
	public void setCgpa(double Cgpa) {
		_Cgpa = Cgpa;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public customFieldAggregationTable toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (customFieldAggregationTable)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		customFieldAggregationTableImpl customFieldAggregationTableImpl = new customFieldAggregationTableImpl();

		customFieldAggregationTableImpl.setUserId(getUserId());
		customFieldAggregationTableImpl.setSapId(getSapId());
		customFieldAggregationTableImpl.setCgpa(getCgpa());

		customFieldAggregationTableImpl.resetOriginalValues();

		return customFieldAggregationTableImpl;
	}

	@Override
	public int compareTo(
		customFieldAggregationTable customFieldAggregationTable) {
		int primaryKey = customFieldAggregationTable.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof customFieldAggregationTable)) {
			return false;
		}

		customFieldAggregationTable customFieldAggregationTable = (customFieldAggregationTable)obj;

		int primaryKey = customFieldAggregationTable.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		customFieldAggregationTableModelImpl customFieldAggregationTableModelImpl =
			this;

		customFieldAggregationTableModelImpl._originalSapId = customFieldAggregationTableModelImpl._SapId;

		customFieldAggregationTableModelImpl._setOriginalSapId = false;

		customFieldAggregationTableModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<customFieldAggregationTable> toCacheModel() {
		customFieldAggregationTableCacheModel customFieldAggregationTableCacheModel =
			new customFieldAggregationTableCacheModel();

		customFieldAggregationTableCacheModel.UserId = getUserId();

		customFieldAggregationTableCacheModel.SapId = getSapId();

		customFieldAggregationTableCacheModel.Cgpa = getCgpa();

		return customFieldAggregationTableCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{UserId=");
		sb.append(getUserId());
		sb.append(", SapId=");
		sb.append(getSapId());
		sb.append(", Cgpa=");
		sb.append(getCgpa());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("Aggregation.model.customFieldAggregationTable");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>UserId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>SapId</column-name><column-value><![CDATA[");
		sb.append(getSapId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Cgpa</column-name><column-value><![CDATA[");
		sb.append(getCgpa());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = customFieldAggregationTable.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			customFieldAggregationTable.class
		};
	private int _UserId;
	private int _SapId;
	private int _originalSapId;
	private boolean _setOriginalSapId;
	private double _Cgpa;
	private long _columnBitmask;
	private customFieldAggregationTable _escapedModel;
}