/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package JobListService.model.impl;

import JobListService.model.JobId;
import JobListService.model.JobIdModel;
import JobListService.model.JobIdSoap;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the JobId service. Represents a row in the &quot;KMB_JobId&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link JobIdModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link JobIdImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see JobIdImpl
 * @see JobId
 * @see JobIdModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class JobIdModelImpl extends BaseModelImpl<JobId> implements JobIdModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a job ID model instance should use the {@link JobId} interface instead.
	 */
	public static final String TABLE_NAME = "KMB_JobId";
	public static final Object[][] TABLE_COLUMNS = {
			{ "JobId", Types.BIGINT },
			{ "Company", Types.VARCHAR },
			{ "Post", Types.VARCHAR },
			{ "Pay", Types.INTEGER },
			{ "CGPA", Types.INTEGER },
			{ "Description", Types.VARCHAR },
			{ "MoreInfo", Types.VARCHAR },
			{ "LastDateToApply", Types.TIMESTAMP },
			{ "CIT", Types.BOOLEAN },
			{ "nonCIT", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("JobId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("Company", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Post", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Pay", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CGPA", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("Description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MoreInfo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("LastDateToApply", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CIT", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("nonCIT", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table KMB_JobId (JobId LONG not null primary key,Company VARCHAR(75) null,Post VARCHAR(75) null,Pay INTEGER,CGPA INTEGER,Description VARCHAR(75) null,MoreInfo VARCHAR(75) null,LastDateToApply DATE null,CIT BOOLEAN,nonCIT BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table KMB_JobId";
	public static final String ORDER_BY_JPQL = " ORDER BY jobId.JobId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY KMB_JobId.JobId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(JobListService.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.JobListService.model.JobId"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(JobListService.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.JobListService.model.JobId"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static JobId toModel(JobIdSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		JobId model = new JobIdImpl();

		model.setJobId(soapModel.getJobId());
		model.setCompany(soapModel.getCompany());
		model.setPost(soapModel.getPost());
		model.setPay(soapModel.getPay());
		model.setCGPA(soapModel.getCGPA());
		model.setDescription(soapModel.getDescription());
		model.setMoreInfo(soapModel.getMoreInfo());
		model.setLastDateToApply(soapModel.getLastDateToApply());
		model.setCIT(soapModel.getCIT());
		model.setNonCIT(soapModel.getNonCIT());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<JobId> toModels(JobIdSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<JobId> models = new ArrayList<JobId>(soapModels.length);

		for (JobIdSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(JobListService.service.util.ServiceProps.get(
				"lock.expiration.time.JobListService.model.JobId"));

	public JobIdModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _JobId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setJobId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _JobId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return JobId.class;
	}

	@Override
	public String getModelClassName() {
		return JobId.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("JobId", getJobId());
		attributes.put("Company", getCompany());
		attributes.put("Post", getPost());
		attributes.put("Pay", getPay());
		attributes.put("CGPA", getCGPA());
		attributes.put("Description", getDescription());
		attributes.put("MoreInfo", getMoreInfo());
		attributes.put("LastDateToApply", getLastDateToApply());
		attributes.put("CIT", getCIT());
		attributes.put("nonCIT", getNonCIT());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long JobId = (Long)attributes.get("JobId");

		if (JobId != null) {
			setJobId(JobId);
		}

		String Company = (String)attributes.get("Company");

		if (Company != null) {
			setCompany(Company);
		}

		String Post = (String)attributes.get("Post");

		if (Post != null) {
			setPost(Post);
		}

		Integer Pay = (Integer)attributes.get("Pay");

		if (Pay != null) {
			setPay(Pay);
		}

		Integer CGPA = (Integer)attributes.get("CGPA");

		if (CGPA != null) {
			setCGPA(CGPA);
		}

		String Description = (String)attributes.get("Description");

		if (Description != null) {
			setDescription(Description);
		}

		String MoreInfo = (String)attributes.get("MoreInfo");

		if (MoreInfo != null) {
			setMoreInfo(MoreInfo);
		}

		Date LastDateToApply = (Date)attributes.get("LastDateToApply");

		if (LastDateToApply != null) {
			setLastDateToApply(LastDateToApply);
		}

		Boolean CIT = (Boolean)attributes.get("CIT");

		if (CIT != null) {
			setCIT(CIT);
		}

		Boolean nonCIT = (Boolean)attributes.get("nonCIT");

		if (nonCIT != null) {
			setNonCIT(nonCIT);
		}
	}

	@JSON
	@Override
	public long getJobId() {
		return _JobId;
	}

	@Override
	public void setJobId(long JobId) {
		_JobId = JobId;
	}

	@JSON
	@Override
	public String getCompany() {
		if (_Company == null) {
			return StringPool.BLANK;
		}
		else {
			return _Company;
		}
	}

	@Override
	public void setCompany(String Company) {
		_Company = Company;
	}

	@JSON
	@Override
	public String getPost() {
		if (_Post == null) {
			return StringPool.BLANK;
		}
		else {
			return _Post;
		}
	}

	@Override
	public void setPost(String Post) {
		_Post = Post;
	}

	@JSON
	@Override
	public int getPay() {
		return _Pay;
	}

	@Override
	public void setPay(int Pay) {
		_Pay = Pay;
	}

	@JSON
	@Override
	public int getCGPA() {
		return _CGPA;
	}

	@Override
	public void setCGPA(int CGPA) {
		_CGPA = CGPA;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_Description == null) {
			return StringPool.BLANK;
		}
		else {
			return _Description;
		}
	}

	@Override
	public void setDescription(String Description) {
		_Description = Description;
	}

	@JSON
	@Override
	public String getMoreInfo() {
		if (_MoreInfo == null) {
			return StringPool.BLANK;
		}
		else {
			return _MoreInfo;
		}
	}

	@Override
	public void setMoreInfo(String MoreInfo) {
		_MoreInfo = MoreInfo;
	}

	@JSON
	@Override
	public Date getLastDateToApply() {
		return _LastDateToApply;
	}

	@Override
	public void setLastDateToApply(Date LastDateToApply) {
		_LastDateToApply = LastDateToApply;
	}

	@JSON
	@Override
	public boolean getCIT() {
		return _CIT;
	}

	@JSON
	@Override
	public boolean isCIT() {
		return _CIT;
	}

	@Override
	public void setCIT(boolean CIT) {
		_CIT = CIT;
	}

	@JSON
	@Override
	public boolean getNonCIT() {
		return _nonCIT;
	}

	@JSON
	@Override
	public boolean isNonCIT() {
		return _nonCIT;
	}

	@Override
	public void setNonCIT(boolean nonCIT) {
		_nonCIT = nonCIT;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			JobId.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public JobId toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (JobId)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		JobIdImpl jobIdImpl = new JobIdImpl();

		jobIdImpl.setJobId(getJobId());
		jobIdImpl.setCompany(getCompany());
		jobIdImpl.setPost(getPost());
		jobIdImpl.setPay(getPay());
		jobIdImpl.setCGPA(getCGPA());
		jobIdImpl.setDescription(getDescription());
		jobIdImpl.setMoreInfo(getMoreInfo());
		jobIdImpl.setLastDateToApply(getLastDateToApply());
		jobIdImpl.setCIT(getCIT());
		jobIdImpl.setNonCIT(getNonCIT());

		jobIdImpl.resetOriginalValues();

		return jobIdImpl;
	}

	@Override
	public int compareTo(JobId jobId) {
		long primaryKey = jobId.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof JobId)) {
			return false;
		}

		JobId jobId = (JobId)obj;

		long primaryKey = jobId.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<JobId> toCacheModel() {
		JobIdCacheModel jobIdCacheModel = new JobIdCacheModel();

		jobIdCacheModel.JobId = getJobId();

		jobIdCacheModel.Company = getCompany();

		String Company = jobIdCacheModel.Company;

		if ((Company != null) && (Company.length() == 0)) {
			jobIdCacheModel.Company = null;
		}

		jobIdCacheModel.Post = getPost();

		String Post = jobIdCacheModel.Post;

		if ((Post != null) && (Post.length() == 0)) {
			jobIdCacheModel.Post = null;
		}

		jobIdCacheModel.Pay = getPay();

		jobIdCacheModel.CGPA = getCGPA();

		jobIdCacheModel.Description = getDescription();

		String Description = jobIdCacheModel.Description;

		if ((Description != null) && (Description.length() == 0)) {
			jobIdCacheModel.Description = null;
		}

		jobIdCacheModel.MoreInfo = getMoreInfo();

		String MoreInfo = jobIdCacheModel.MoreInfo;

		if ((MoreInfo != null) && (MoreInfo.length() == 0)) {
			jobIdCacheModel.MoreInfo = null;
		}

		Date LastDateToApply = getLastDateToApply();

		if (LastDateToApply != null) {
			jobIdCacheModel.LastDateToApply = LastDateToApply.getTime();
		}
		else {
			jobIdCacheModel.LastDateToApply = Long.MIN_VALUE;
		}

		jobIdCacheModel.CIT = getCIT();

		jobIdCacheModel.nonCIT = getNonCIT();

		return jobIdCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{JobId=");
		sb.append(getJobId());
		sb.append(", Company=");
		sb.append(getCompany());
		sb.append(", Post=");
		sb.append(getPost());
		sb.append(", Pay=");
		sb.append(getPay());
		sb.append(", CGPA=");
		sb.append(getCGPA());
		sb.append(", Description=");
		sb.append(getDescription());
		sb.append(", MoreInfo=");
		sb.append(getMoreInfo());
		sb.append(", LastDateToApply=");
		sb.append(getLastDateToApply());
		sb.append(", CIT=");
		sb.append(getCIT());
		sb.append(", nonCIT=");
		sb.append(getNonCIT());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("JobListService.model.JobId");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>JobId</column-name><column-value><![CDATA[");
		sb.append(getJobId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Company</column-name><column-value><![CDATA[");
		sb.append(getCompany());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Post</column-name><column-value><![CDATA[");
		sb.append(getPost());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Pay</column-name><column-value><![CDATA[");
		sb.append(getPay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CGPA</column-name><column-value><![CDATA[");
		sb.append(getCGPA());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>MoreInfo</column-name><column-value><![CDATA[");
		sb.append(getMoreInfo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>LastDateToApply</column-name><column-value><![CDATA[");
		sb.append(getLastDateToApply());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CIT</column-name><column-value><![CDATA[");
		sb.append(getCIT());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nonCIT</column-name><column-value><![CDATA[");
		sb.append(getNonCIT());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = JobId.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			JobId.class
		};
	private long _JobId;
	private String _Company;
	private String _Post;
	private int _Pay;
	private int _CGPA;
	private String _Description;
	private String _MoreInfo;
	private Date _LastDateToApply;
	private boolean _CIT;
	private boolean _nonCIT;
	private JobId _escapedModel;
}