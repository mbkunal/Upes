/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package JobApplicationRecordService.model.impl;

import JobApplicationRecordService.model.Job_Application_Records;
import JobApplicationRecordService.model.Job_Application_RecordsModel;
import JobApplicationRecordService.model.Job_Application_RecordsSoap;

import JobApplicationRecordService.service.persistence.Job_Application_RecordsPK;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Job_Application_Records service. Represents a row in the &quot;KMB_Job_Application_Records&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link Job_Application_RecordsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Job_Application_RecordsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Job_Application_RecordsImpl
 * @see Job_Application_Records
 * @see Job_Application_RecordsModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class Job_Application_RecordsModelImpl extends BaseModelImpl<Job_Application_Records>
	implements Job_Application_RecordsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a job_ application_ records model instance should use the {@link Job_Application_Records} interface instead.
	 */
	public static final String TABLE_NAME = "KMB_Job_Application_Records";
	public static final Object[][] TABLE_COLUMNS = {
			{ "SapId", Types.BIGINT },
			{ "JobId", Types.BIGINT },
			{ "ApplicationDate", Types.TIMESTAMP },
			{ "resume", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("SapId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("JobId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ApplicationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("resume", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table KMB_Job_Application_Records (SapId LONG not null,JobId LONG not null,ApplicationDate DATE null,resume VARCHAR(75) null,primary key (SapId, JobId))";
	public static final String TABLE_SQL_DROP = "drop table KMB_Job_Application_Records";
	public static final String ORDER_BY_JPQL = " ORDER BY job_Application_Records.id.SapId ASC, job_Application_Records.id.JobId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY KMB_Job_Application_Records.SapId ASC, KMB_Job_Application_Records.JobId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(JobApplicationRecordService.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.JobApplicationRecordService.model.Job_Application_Records"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(JobApplicationRecordService.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.JobApplicationRecordService.model.Job_Application_Records"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(JobApplicationRecordService.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.JobApplicationRecordService.model.Job_Application_Records"),
			true);
	public static final long SAPID_COLUMN_BITMASK = 1L;
	public static final long JOBID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Job_Application_Records toModel(
		Job_Application_RecordsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Job_Application_Records model = new Job_Application_RecordsImpl();

		model.setSapId(soapModel.getSapId());
		model.setJobId(soapModel.getJobId());
		model.setApplicationDate(soapModel.getApplicationDate());
		model.setResume(soapModel.getResume());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Job_Application_Records> toModels(
		Job_Application_RecordsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Job_Application_Records> models = new ArrayList<Job_Application_Records>(soapModels.length);

		for (Job_Application_RecordsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(JobApplicationRecordService.service.util.ServiceProps.get(
				"lock.expiration.time.JobApplicationRecordService.model.Job_Application_Records"));

	public Job_Application_RecordsModelImpl() {
	}

	@Override
	public Job_Application_RecordsPK getPrimaryKey() {
		return new Job_Application_RecordsPK(_SapId, _JobId);
	}

	@Override
	public void setPrimaryKey(Job_Application_RecordsPK primaryKey) {
		setSapId(primaryKey.SapId);
		setJobId(primaryKey.JobId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new Job_Application_RecordsPK(_SapId, _JobId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((Job_Application_RecordsPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Job_Application_Records.class;
	}

	@Override
	public String getModelClassName() {
		return Job_Application_Records.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("SapId", getSapId());
		attributes.put("JobId", getJobId());
		attributes.put("ApplicationDate", getApplicationDate());
		attributes.put("resume", getResume());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long SapId = (Long)attributes.get("SapId");

		if (SapId != null) {
			setSapId(SapId);
		}

		Long JobId = (Long)attributes.get("JobId");

		if (JobId != null) {
			setJobId(JobId);
		}

		Date ApplicationDate = (Date)attributes.get("ApplicationDate");

		if (ApplicationDate != null) {
			setApplicationDate(ApplicationDate);
		}

		String resume = (String)attributes.get("resume");

		if (resume != null) {
			setResume(resume);
		}
	}

	@JSON
	@Override
	public long getSapId() {
		return _SapId;
	}

	@Override
	public void setSapId(long SapId) {
		_columnBitmask |= SAPID_COLUMN_BITMASK;

		if (!_setOriginalSapId) {
			_setOriginalSapId = true;

			_originalSapId = _SapId;
		}

		_SapId = SapId;
	}

	public long getOriginalSapId() {
		return _originalSapId;
	}

	@JSON
	@Override
	public long getJobId() {
		return _JobId;
	}

	@Override
	public void setJobId(long JobId) {
		_JobId = JobId;
	}

	@JSON
	@Override
	public Date getApplicationDate() {
		return _ApplicationDate;
	}

	@Override
	public void setApplicationDate(Date ApplicationDate) {
		_ApplicationDate = ApplicationDate;
	}

	@JSON
	@Override
	public String getResume() {
		if (_resume == null) {
			return StringPool.BLANK;
		}
		else {
			return _resume;
		}
	}

	@Override
	public void setResume(String resume) {
		_resume = resume;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Job_Application_Records toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Job_Application_Records)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		Job_Application_RecordsImpl job_Application_RecordsImpl = new Job_Application_RecordsImpl();

		job_Application_RecordsImpl.setSapId(getSapId());
		job_Application_RecordsImpl.setJobId(getJobId());
		job_Application_RecordsImpl.setApplicationDate(getApplicationDate());
		job_Application_RecordsImpl.setResume(getResume());

		job_Application_RecordsImpl.resetOriginalValues();

		return job_Application_RecordsImpl;
	}

	@Override
	public int compareTo(Job_Application_Records job_Application_Records) {
		Job_Application_RecordsPK primaryKey = job_Application_Records.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Job_Application_Records)) {
			return false;
		}

		Job_Application_Records job_Application_Records = (Job_Application_Records)obj;

		Job_Application_RecordsPK primaryKey = job_Application_Records.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		Job_Application_RecordsModelImpl job_Application_RecordsModelImpl = this;

		job_Application_RecordsModelImpl._originalSapId = job_Application_RecordsModelImpl._SapId;

		job_Application_RecordsModelImpl._setOriginalSapId = false;

		job_Application_RecordsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Job_Application_Records> toCacheModel() {
		Job_Application_RecordsCacheModel job_Application_RecordsCacheModel = new Job_Application_RecordsCacheModel();

		job_Application_RecordsCacheModel.job_Application_RecordsPK = getPrimaryKey();

		job_Application_RecordsCacheModel.SapId = getSapId();

		job_Application_RecordsCacheModel.JobId = getJobId();

		Date ApplicationDate = getApplicationDate();

		if (ApplicationDate != null) {
			job_Application_RecordsCacheModel.ApplicationDate = ApplicationDate.getTime();
		}
		else {
			job_Application_RecordsCacheModel.ApplicationDate = Long.MIN_VALUE;
		}

		job_Application_RecordsCacheModel.resume = getResume();

		String resume = job_Application_RecordsCacheModel.resume;

		if ((resume != null) && (resume.length() == 0)) {
			job_Application_RecordsCacheModel.resume = null;
		}

		return job_Application_RecordsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{SapId=");
		sb.append(getSapId());
		sb.append(", JobId=");
		sb.append(getJobId());
		sb.append(", ApplicationDate=");
		sb.append(getApplicationDate());
		sb.append(", resume=");
		sb.append(getResume());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("JobApplicationRecordService.model.Job_Application_Records");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>SapId</column-name><column-value><![CDATA[");
		sb.append(getSapId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>JobId</column-name><column-value><![CDATA[");
		sb.append(getJobId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ApplicationDate</column-name><column-value><![CDATA[");
		sb.append(getApplicationDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resume</column-name><column-value><![CDATA[");
		sb.append(getResume());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Job_Application_Records.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Job_Application_Records.class
		};
	private long _SapId;
	private long _originalSapId;
	private boolean _setOriginalSapId;
	private long _JobId;
	private Date _ApplicationDate;
	private String _resume;
	private long _columnBitmask;
	private Job_Application_Records _escapedModel;
}