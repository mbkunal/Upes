/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package JobApplicationRecordService.service.base;

import JobApplicationRecordService.model.Job_Application_Records;

import JobApplicationRecordService.service.Job_Application_RecordsLocalService;

import JobApplicationRecordService.service.persistence.Job_Application_RecordsPK;
import JobApplicationRecordService.service.persistence.Job_Application_RecordsPersistence;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the job_ application_ records local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link JobApplicationRecordService.service.impl.Job_Application_RecordsLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see JobApplicationRecordService.service.impl.Job_Application_RecordsLocalServiceImpl
 * @see JobApplicationRecordService.service.Job_Application_RecordsLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class Job_Application_RecordsLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements Job_Application_RecordsLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link JobApplicationRecordService.service.Job_Application_RecordsLocalServiceUtil} to access the job_ application_ records local service.
	 */

	/**
	 * Adds the job_ application_ records to the database. Also notifies the appropriate model listeners.
	 *
	 * @param job_Application_Records the job_ application_ records
	 * @return the job_ application_ records that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Job_Application_Records addJob_Application_Records(
		Job_Application_Records job_Application_Records) {
		job_Application_Records.setNew(true);

		return job_Application_RecordsPersistence.update(job_Application_Records);
	}

	/**
	 * Creates a new job_ application_ records with the primary key. Does not add the job_ application_ records to the database.
	 *
	 * @param job_Application_RecordsPK the primary key for the new job_ application_ records
	 * @return the new job_ application_ records
	 */
	@Override
	public Job_Application_Records createJob_Application_Records(
		Job_Application_RecordsPK job_Application_RecordsPK) {
		return job_Application_RecordsPersistence.create(job_Application_RecordsPK);
	}

	/**
	 * Deletes the job_ application_ records with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param job_Application_RecordsPK the primary key of the job_ application_ records
	 * @return the job_ application_ records that was removed
	 * @throws PortalException if a job_ application_ records with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Job_Application_Records deleteJob_Application_Records(
		Job_Application_RecordsPK job_Application_RecordsPK)
		throws PortalException {
		return job_Application_RecordsPersistence.remove(job_Application_RecordsPK);
	}

	/**
	 * Deletes the job_ application_ records from the database. Also notifies the appropriate model listeners.
	 *
	 * @param job_Application_Records the job_ application_ records
	 * @return the job_ application_ records that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Job_Application_Records deleteJob_Application_Records(
		Job_Application_Records job_Application_Records) {
		return job_Application_RecordsPersistence.remove(job_Application_Records);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Job_Application_Records.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return job_Application_RecordsPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link JobApplicationRecordService.model.impl.Job_Application_RecordsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return job_Application_RecordsPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link JobApplicationRecordService.model.impl.Job_Application_RecordsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return job_Application_RecordsPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return job_Application_RecordsPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return job_Application_RecordsPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public Job_Application_Records fetchJob_Application_Records(
		Job_Application_RecordsPK job_Application_RecordsPK) {
		return job_Application_RecordsPersistence.fetchByPrimaryKey(job_Application_RecordsPK);
	}

	/**
	 * Returns the job_ application_ records with the primary key.
	 *
	 * @param job_Application_RecordsPK the primary key of the job_ application_ records
	 * @return the job_ application_ records
	 * @throws PortalException if a job_ application_ records with the primary key could not be found
	 */
	@Override
	public Job_Application_Records getJob_Application_Records(
		Job_Application_RecordsPK job_Application_RecordsPK)
		throws PortalException {
		return job_Application_RecordsPersistence.findByPrimaryKey(job_Application_RecordsPK);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(job_Application_RecordsLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(Job_Application_Records.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("primaryKey.SapId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(job_Application_RecordsLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(Job_Application_Records.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"primaryKey.SapId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(job_Application_RecordsLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(Job_Application_Records.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("primaryKey.SapId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return job_Application_RecordsLocalService.deleteJob_Application_Records((Job_Application_Records)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return job_Application_RecordsPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the job_ application_ recordses.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link JobApplicationRecordService.model.impl.Job_Application_RecordsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of job_ application_ recordses
	 * @param end the upper bound of the range of job_ application_ recordses (not inclusive)
	 * @return the range of job_ application_ recordses
	 */
	@Override
	public List<Job_Application_Records> getJob_Application_Recordses(
		int start, int end) {
		return job_Application_RecordsPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of job_ application_ recordses.
	 *
	 * @return the number of job_ application_ recordses
	 */
	@Override
	public int getJob_Application_RecordsesCount() {
		return job_Application_RecordsPersistence.countAll();
	}

	/**
	 * Updates the job_ application_ records in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param job_Application_Records the job_ application_ records
	 * @return the job_ application_ records that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Job_Application_Records updateJob_Application_Records(
		Job_Application_Records job_Application_Records) {
		return job_Application_RecordsPersistence.update(job_Application_Records);
	}

	/**
	 * Returns the job_ application_ records local service.
	 *
	 * @return the job_ application_ records local service
	 */
	public Job_Application_RecordsLocalService getJob_Application_RecordsLocalService() {
		return job_Application_RecordsLocalService;
	}

	/**
	 * Sets the job_ application_ records local service.
	 *
	 * @param job_Application_RecordsLocalService the job_ application_ records local service
	 */
	public void setJob_Application_RecordsLocalService(
		Job_Application_RecordsLocalService job_Application_RecordsLocalService) {
		this.job_Application_RecordsLocalService = job_Application_RecordsLocalService;
	}

	/**
	 * Returns the job_ application_ records persistence.
	 *
	 * @return the job_ application_ records persistence
	 */
	public Job_Application_RecordsPersistence getJob_Application_RecordsPersistence() {
		return job_Application_RecordsPersistence;
	}

	/**
	 * Sets the job_ application_ records persistence.
	 *
	 * @param job_Application_RecordsPersistence the job_ application_ records persistence
	 */
	public void setJob_Application_RecordsPersistence(
		Job_Application_RecordsPersistence job_Application_RecordsPersistence) {
		this.job_Application_RecordsPersistence = job_Application_RecordsPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("JobApplicationRecordService.model.Job_Application_Records",
			job_Application_RecordsLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"JobApplicationRecordService.model.Job_Application_Records");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return Job_Application_RecordsLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return Job_Application_Records.class;
	}

	protected String getModelClassName() {
		return Job_Application_Records.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = job_Application_RecordsPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = Job_Application_RecordsLocalService.class)
	protected Job_Application_RecordsLocalService job_Application_RecordsLocalService;
	@BeanReference(type = Job_Application_RecordsPersistence.class)
	protected Job_Application_RecordsPersistence job_Application_RecordsPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}